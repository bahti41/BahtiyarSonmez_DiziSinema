// <auto-generated />
using System;
using DiziSinema.MVC.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiziSinema.MVC.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("DiziSinema.MVC.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9c5fef93-57f9-4cbc-b4cc-c614e4f5c715",
                            Description = "Süper Yönetici haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "93e80a57-b370-458d-819d-24f1dfc2d234",
                            Description = "Yönetici haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7f348f76-6992-4e93-898f-496fef9a18e6",
                            Description = "Müşteri haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("DiziSinema.MVC.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97659c42-b29f-439b-9be2-a9458232facd",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "c670925b-4d50-405b-8435-c06af349f788",
                            DateOfBirth = new DateTime(2018, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "talutsonmez@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Talut",
                            Gender = "Erkek",
                            LastName = "Sönmez",
                            LockoutEnabled = false,
                            NormalizedEmail = "TALUTSONMEZ@GMAIL.COM",
                            NormalizedUserName = "TALUTSONMEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELXrN8lQcOSUwPea/RoS7I/Kgsamt8S/JCDMXMky/FsF5+ihHgTjwWV0NTn1vTgTSw==",
                            PhoneNumber = "5558779955",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aab7152a-924c-49d0-9eed-2dbb62003616",
                            TwoFactorEnabled = false,
                            UserName = "talutsonmez"
                        },
                        new
                        {
                            Id = "c7e4af16-55f5-4057-be05-e7deea18d852",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "d597eb95-335d-4eb7-8043-5de489683a9c",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bahtiyarsonmez@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bahtiyar",
                            Gender = "Erkek",
                            LastName = "Sönmez",
                            LockoutEnabled = false,
                            NormalizedEmail = "BAHTIYARSONMEZ@GMAIL.COM",
                            NormalizedUserName = "BAHTIYARSONMEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFWCyK3uTuVpsXw6w0YsTbEhys/By81osvlFl3pWYFmkJpa+u1GKrlgWw/ESxnq/A==",
                            PhoneNumber = "5558779966",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cb14827-3e15-4704-a60d-7b9980bc6565",
                            TwoFactorEnabled = false,
                            UserName = "bahtiyarsonmez"
                        },
                        new
                        {
                            Id = "dbebfd8a-130a-4857-aa5e-778e643d9fec",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "95e2eb4e-514c-49b1-ac63-8123fa29dafb",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emrullahkaraca@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emrullah",
                            Gender = "Erkek",
                            LastName = "Karaca",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRULLAHKARACA@GMAIL.COM",
                            NormalizedUserName = "EMRULLAHKARACA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDmZZXxq47M+ve9RsEZMLUMXjypuSxL0oCLNGe3Izt62dwg/j+3olvogly5jw9fKsA==",
                            PhoneNumber = "5558779911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e08a898f-3970-40f6-8d56-50a6e0c065a6",
                            TwoFactorEnabled = false,
                            UserName = "emrullahkaraca"
                        },
                        new
                        {
                            Id = "da1d12ea-99dd-477a-9775-204bb989529b",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "7d23ddb5-0871-460b-8362-839008139040",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "numandemirhan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Numan",
                            Gender = "Erkek",
                            LastName = "Demirhan",
                            LockoutEnabled = false,
                            NormalizedEmail = "NUMANDEMIRHAN@GMAIL.COM",
                            NormalizedUserName = "NUMANDEMIRHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFn5sNSZrV6Yhlq7AGn0Q9siy3YatcAZDVwUUd1FjpsWWbzpkAmouO/J3Yix2XCwew==",
                            PhoneNumber = "5558779911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e82cc6aa-f4c8-4573-a90b-c1b86b157a22",
                            TwoFactorEnabled = false,
                            UserName = "numandemirhan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "97659c42-b29f-439b-9be2-a9458232facd",
                            RoleId = "9c5fef93-57f9-4cbc-b4cc-c614e4f5c715"
                        },
                        new
                        {
                            UserId = "c7e4af16-55f5-4057-be05-e7deea18d852",
                            RoleId = "93e80a57-b370-458d-819d-24f1dfc2d234"
                        },
                        new
                        {
                            UserId = "dbebfd8a-130a-4857-aa5e-778e643d9fec",
                            RoleId = "7f348f76-6992-4e93-898f-496fef9a18e6"
                        },
                        new
                        {
                            UserId = "da1d12ea-99dd-477a-9775-204bb989529b",
                            RoleId = "7f348f76-6992-4e93-898f-496fef9a18e6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
