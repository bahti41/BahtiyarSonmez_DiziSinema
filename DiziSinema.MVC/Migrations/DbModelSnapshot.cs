// <auto-generated />
using System;
using DiziSinema.MVC.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiziSinema.MVC.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("DiziSinema.MVC.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad8b0ac8-272d-4260-b1bd-2b5875b9db23",
                            Description = "Süper Yönetici haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "ade4c864-3f3b-4814-9a18-4505d3e60825",
                            Description = "Yönetici haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("DiziSinema.MVC.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "99c4f7f7-e064-46c1-a639-1cfa346b6491",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "2c043171-0701-497c-87ed-6cd39b61eeca",
                            DateOfBirth = new DateTime(2018, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "talutsonmez@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Talut",
                            Gender = "Erkek",
                            LastName = "Sönmez",
                            LockoutEnabled = false,
                            NormalizedEmail = "TALUTSONMEZ@GMAIL.COM",
                            NormalizedUserName = "TALUTSONMEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENSqNQs8Nngv3yzLvPo5St4nKVuO+UxCmpo+sKYvXe09oHKLbboWS01ZzIFYPoOU5A==",
                            PhoneNumber = "5558779955",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7022ec65-b221-4224-8bb1-5be1deca468a",
                            TwoFactorEnabled = false,
                            UserName = "talutsonmez"
                        },
                        new
                        {
                            Id = "37417331-5c8b-43d2-bea2-7b2f8b8c68a3",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "35d36324-e63f-4c81-997a-d49bd073f858",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bahtiyarsonmez@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bahtiyar",
                            Gender = "Erkek",
                            LastName = "Sönmez",
                            LockoutEnabled = false,
                            NormalizedEmail = "BAHTIYARSONMEZ@GMAIL.COM",
                            NormalizedUserName = "BAHTIYARSONMEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELWIJelfH+QtMAgf7GYHTGbFv52FtsBLhiV9+IcbuHFUTlBLFMD4v+yF/64UPLJhJA==",
                            PhoneNumber = "5558779966",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bad51558-0bf4-40ce-b5b5-949b6442de8e",
                            TwoFactorEnabled = false,
                            UserName = "bahtiyarsonmez"
                        },
                        new
                        {
                            Id = "386e5b9c-ac9c-495a-89ab-5b504e110e1d",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "7882cb71-fb0e-4917-b28a-632dc5f48747",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emrullahkaraca@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emrullah",
                            Gender = "Erkek",
                            LastName = "Karaca",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRULLAHKARACA@GMAIL.COM",
                            NormalizedUserName = "EMRULLAHKARACA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuDJTESZN+nSfwIgaGskKRBwymKeXoWc/kGhyzlXxrQs9E47PLrnwx/LKSrGA9p/w==",
                            PhoneNumber = "5558779911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a202a87-54ef-4f42-9911-2a713b67fb86",
                            TwoFactorEnabled = false,
                            UserName = "emrullahkaraca"
                        },
                        new
                        {
                            Id = "0785c1a0-619b-4904-98a2-06e6d8e651c2",
                            AccessFailedCount = 0,
                            Address = "Kocaeli/Karamürsel/Kırık Merdiven",
                            City = "Kocaeli",
                            ConcurrencyStamp = "072674e3-ad24-481b-a449-4d2979ef4fa1",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "numandemirhan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Numan",
                            Gender = "Erkek",
                            LastName = "Demirhan",
                            LockoutEnabled = false,
                            NormalizedEmail = "NUMANDEMIRHAN@GMAIL.COM",
                            NormalizedUserName = "NUMANDEMIRHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJP8M0GbHf8e+XnUfBCSQ7jGE7R9WIWg8UmSqSegl6DD9+pP/EW2vMc+BvEb6oNCNg==",
                            PhoneNumber = "5558779911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46cf9c0c-1279-4259-9f79-1b6753e85160",
                            TwoFactorEnabled = false,
                            UserName = "numandemirhan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "99c4f7f7-e064-46c1-a639-1cfa346b6491",
                            RoleId = "ad8b0ac8-272d-4260-b1bd-2b5875b9db23"
                        },
                        new
                        {
                            UserId = "37417331-5c8b-43d2-bea2-7b2f8b8c68a3",
                            RoleId = "ad8b0ac8-272d-4260-b1bd-2b5875b9db23"
                        },
                        new
                        {
                            UserId = "386e5b9c-ac9c-495a-89ab-5b504e110e1d",
                            RoleId = "ade4c864-3f3b-4814-9a18-4505d3e60825"
                        },
                        new
                        {
                            UserId = "0785c1a0-619b-4904-98a2-06e6d8e651c2",
                            RoleId = "ade4c864-3f3b-4814-9a18-4505d3e60825"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiziSinema.MVC.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
